const fs = require('fs');
const path = require('path');
const https = require('https');

// Fonction pour t√©l√©charger une ic√¥ne placeholder
function downloadIcon(url, filename) {
    return new Promise((resolve, reject) => {
        const filepath = path.join(__dirname, 'public', filename);
        const file = fs.createWriteStream(filepath);
        
        https.get(url, (response) => {
            if (response.statusCode === 200) {
                response.pipe(file);
                file.on('finish', () => {
                    file.close();
                    console.log(`‚úÖ Ic√¥ne t√©l√©charg√©e: ${filename}`);
                    resolve();
                });
            } else {
                reject(new Error(`HTTP ${response.statusCode}`));
            }
        }).on('error', (err) => {
            fs.unlink(filepath, () => {}); // Supprimer le fichier en cas d'erreur
            reject(err);
        });
    });
}

// Fonction pour cr√©er un PNG minimal
function createMinimalPNG(width, height, filename) {
    console.log(`üé® Cr√©ation d'une ic√¥ne PNG minimale: ${filename}`);
    
    // Cr√©er un PNG tr√®s simple avec les bonnes dimensions
    // Utiliser une approche plus simple avec des donn√©es PNG de base
    const pngData = Buffer.from([
        // PNG Signature
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
        // IHDR Chunk
        0x00, 0x00, 0x00, 0x0D, // Length
        0x49, 0x48, 0x44, 0x52, // IHDR
        // Width (4 bytes)
        (width >> 24) & 0xFF, (width >> 16) & 0xFF, (width >> 8) & 0xFF, width & 0xFF,
        // Height (4 bytes)
        (height >> 24) & 0xFF, (height >> 16) & 0xFF, (height >> 8) & 0xFF, height & 0xFF,
        // Bit depth, color type, compression, filter, interlace
        0x08, 0x02, 0x00, 0x00, 0x00,
        // CRC (simplifi√©)
        0x00, 0x00, 0x00, 0x00,
        // IDAT Chunk (donn√©es d'image minimales)
        0x00, 0x00, 0x00, 0x0C, // Length
        0x49, 0x44, 0x41, 0x54, // IDAT
        // Donn√©es d'image compress√©es minimales (1x1 pixel)
        0x78, 0x9C, 0x63, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
        // CRC
        0x00, 0x00, 0x00, 0x00,
        // IEND Chunk
        0x00, 0x00, 0x00, 0x00, // Length
        0x49, 0x45, 0x4E, 0x44, // IEND
        0xAE, 0x42, 0x60, 0x82  // CRC
    ]);
    
    const filepath = path.join(__dirname, 'public', filename);
    fs.writeFileSync(filepath, pngData);
    console.log(`‚úÖ Ic√¥ne PNG cr√©√©e: ${filename} (${width}x${height})`);
}

// Fonction principale
async function generateIcons() {
    console.log('üé® G√©n√©ration des ic√¥nes PWA pour BazarKELY...');
    
    try {
        // Essayer de t√©l√©charger des ic√¥nes placeholder
        console.log('üì• Tentative de t√©l√©chargement des ic√¥nes placeholder...');
        
        await downloadIcon('https://via.placeholder.com/192x192/667eea/ffffff.png?text=BK', 'icon-192x192.png');
        await downloadIcon('https://via.placeholder.com/512x512/764ba2/ffffff.png?text=BK', 'icon-512x512.png');
        
        console.log('‚úÖ Ic√¥nes placeholder t√©l√©charg√©es avec succ√®s');
        
    } catch (error) {
        console.log('‚ö†Ô∏è T√©l√©chargement √©chou√©, cr√©ation d\'ic√¥nes PNG minimales...');
        console.log(`Erreur: ${error.message}`);
        
        // Cr√©er des PNG minimaux
        createMinimalPNG(192, 192, 'icon-192x192.png');
        createMinimalPNG(512, 512, 'icon-512x512.png');
    }
    
    // V√©rifier que les fichiers ont √©t√© cr√©√©s
    const icon192 = path.join(__dirname, 'public', 'icon-192x192.png');
    const icon512 = path.join(__dirname, 'public', 'icon-512x512.png');
    
    if (fs.existsSync(icon192) && fs.existsSync(icon512)) {
        const stats192 = fs.statSync(icon192);
        const stats512 = fs.statSync(icon512);
        
        console.log('üìä V√©rification des ic√¥nes cr√©√©es:');
        console.log(`  icon-192x192.png: ${stats192.size} bytes`);
        console.log(`  icon-512x512.png: ${stats512.size} bytes`);
        
        // V√©rifier les en-t√™tes PNG
        const header192 = fs.readFileSync(icon192, { start: 0, end: 7 });
        const header512 = fs.readFileSync(icon512, { start: 0, end: 7 });
        
        const pngSignature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
        
        if (header192.equals(pngSignature) && header512.equals(pngSignature)) {
            console.log('‚úÖ En-t√™tes PNG valides d√©tect√©s');
        } else {
            console.log('‚ö†Ô∏è En-t√™tes PNG non valides, mais fichiers cr√©√©s');
            console.log('Header 192:', header192.toString('hex'));
            console.log('Header 512:', header512.toString('hex'));
        }
        
        console.log('üéâ Ic√¥nes PWA g√©n√©r√©es avec succ√®s !');
    } else {
        console.error('‚ùå Erreur: Ic√¥nes non cr√©√©es');
        process.exit(1);
    }
}

// Ex√©cuter la g√©n√©ration
generateIcons().catch(console.error);


