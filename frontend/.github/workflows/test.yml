name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  component-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run component tests
      working-directory: ./frontend
      run: npm run test:component

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
    
    - name: Upload E2E videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: npm run test:lighthouse
    
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-reports
        path: frontend/lighthouse-reports

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate
    
    - name: Run dependency check
      working-directory: ./frontend
      run: npx audit-ci --moderate

  mobile-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run mobile tests
      working-directory: ./frontend
      run: npm run test:mobile

  test-results:
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, e2e-tests, performance-tests, security-tests, mobile-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Component tests: ${{ needs.component-tests.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Performance tests: ${{ needs.performance-tests.result }}"
        echo "Security tests: ${{ needs.security-tests.result }}"
        echo "Mobile tests: ${{ needs.mobile-tests.result }}"
