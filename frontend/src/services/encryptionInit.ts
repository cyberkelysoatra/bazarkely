/**
 * Initialisation du syst√®me de chiffrement AES-256
 * Lance automatiquement la migration des donn√©es existantes
 */

import { migrationService } from './migrationService'
import { encryptionService } from './encryptionService'

class EncryptionInitializer {
  private initialized = false

  /**
   * Initialise le syst√®me de chiffrement
   */
  async initialize(): Promise<void> {
    if (this.initialized) {
      return
    }

    try {
      console.log('üîê Initialisation du syst√®me de chiffrement AES-256...')

      // V√©rifier le support du navigateur
      if (!encryptionService.isSupported()) {
        console.warn('‚ö†Ô∏è Chiffrement AES-256 non support√©, utilisation de Base64')
        this.initialized = true
        return
      }

      // V√©rifier si la migration a d√©j√† √©t√© effectu√©e
      if (migrationService.isMigrationCompleted()) {
        console.log('‚úÖ Migration AES-256 d√©j√† effectu√©e')
        this.initialized = true
        return
      }

      // Lancer la migration
      console.log('üöÄ Lancement de la migration des donn√©es...')
      const result = await migrationService.runFullMigration()

      if (result.success) {
        console.log(`‚úÖ Migration r√©ussie: ${result.migrated} √©l√©ments migr√©s`)
      } else {
        console.warn(`‚ö†Ô∏è Migration partielle: ${result.migrated} √©l√©ments migr√©s, ${result.failed} √©checs`)
        if (result.errors.length > 0) {
          console.error('‚ùå Erreurs de migration:', result.errors)
        }
      }

      this.initialized = true
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du chiffrement:', error)
      this.initialized = true // Marquer comme initialis√© pour √©viter les boucles
    }
  }

  /**
   * V√©rifie si le syst√®me est initialis√©
   */
  isInitialized(): boolean {
    return this.initialized
  }

  /**
   * Force la r√©initialisation (pour les tests)
   */
  reset(): void {
    this.initialized = false
  }
}

// Instance singleton
export const encryptionInit = new EncryptionInitializer()

// Auto-initialisation lors de l'import
if (typeof window !== 'undefined') {
  // Attendre que le DOM soit pr√™t
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      encryptionInit.initialize()
    })
  } else {
    encryptionInit.initialize()
  }
}





