/**
 * Service d'authentification pour BazarKELY avec Supabase
 * Utilise Supabase Auth pour la gestion des utilisateurs
 */

import type { User } from '../types/supabase';
import { supabase, getCurrentUser, isAuthenticated as checkAuth } from '../lib/supabase';
import { handleSupabaseError } from '../lib/supabase';

class AuthService {
  /**
   * Connexion utilisateur avec Supabase Auth
   */
  async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      console.log('üîê Connexion de l\'utilisateur:', email);
      
      // Connexion avec Supabase Auth
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (error) {
        console.log('‚ùå Erreur lors de la connexion:', error.message);
        return { success: false, error: handleSupabaseError(error) };
      }

      if (!data.user) {
        return { success: false, error: 'Aucun utilisateur trouv√©' };
      }

      // R√©cup√©rer les donn√©es utilisateur depuis la table users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', data.user.id)
        .single() as { data: User | null; error: any };

      if (userError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', userError.message);
        return { success: false, error: 'Erreur lors de la r√©cup√©ration des donn√©es utilisateur' };
      }

      if (!userData) {
        console.log('‚ùå Aucune donn√©e utilisateur trouv√©e');
        return { success: false, error: 'Aucune donn√©e utilisateur trouv√©e' };
      }

      // Convertir les donn√©es Supabase en format User
      const user: User = {
        id: userData.id,
        username: userData.username,
        email: userData.email,
        phone: userData.phone || '',
        role: userData.role,
        preferences: userData.preferences,
        created_at: userData.created_at,
        updated_at: userData.updated_at,
        last_sync: userData.last_sync
      };
      
      console.log('‚úÖ Connexion r√©ussie pour:', email);
      return { success: true, user };

    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  }

  /**
   * Inscription utilisateur avec Supabase Auth
   * Le profil utilisateur est cr√©√© automatiquement par le trigger PostgreSQL handle_new_user
   */
  async register(username: string, email: string, phone: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      console.log('üìù Inscription de l\'utilisateur:', username);
      
      // Inscription avec Supabase Auth
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            username,
            phone
          }
        }
      });
      
      if (error) {
        console.log('‚ùå Erreur lors de l\'inscription:', error.message);
        return { success: false, error: handleSupabaseError(error) };
      }

      if (!data.user) {
        return { success: false, error: 'Aucun utilisateur cr√©√©' };
      }

      // Attendre que la session soit √©tablie
      console.log('‚è≥ Attente de l\'√©tablissement de la session...');
      await this.waitForSession(data.user.id);

      // Le profil utilisateur sera cr√©√© automatiquement par le trigger PostgreSQL
      // Pas besoin d'insertion manuelle - le trigger handle_new_user s'en charge
      console.log('‚úÖ Inscription r√©ussie pour:', username);
      console.log('‚ÑπÔ∏è Le profil utilisateur sera cr√©√© automatiquement par le trigger PostgreSQL');
      
      // Retourner un utilisateur basique avec les donn√©es Auth
      const user: User = {
        id: data.user.id,
        username,
        email,
        phone: phone || '',
        role: 'user', // R√¥le par d√©faut
        preferences: {
          theme: 'system',
          language: 'fr',
          currency: 'MGA'
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        last_sync: new Date().toISOString()
      };
      
      return { success: true, user };

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'inscription:', error);
      return { success: false, error: 'Erreur lors de l\'inscription' };
    }
  }

  /**
   * Attendre que la session Supabase soit √©tablie
   */
  private async waitForSession(userId: string, maxAttempts: number = 10, delayMs: number = 500): Promise<void> {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session && session.user?.id === userId) {
          console.log('‚úÖ Session √©tablie avec succ√®s');
          return;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/${maxAttempts} - Session pas encore disponible`);
      }
      
      if (attempt < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, delayMs));
      }
    }
    
    console.warn('‚ö†Ô∏è Session non √©tablie apr√®s toutes les tentatives, mais l\'inscription a r√©ussi');
  }

  /**
   * R√©initialisation du mot de passe avec Supabase Auth
   */
  async resetPassword(email: string): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ R√©initialisation du mot de passe pour:', email);
      
      // Envoyer l'email de r√©initialisation avec Supabase
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });
      
      if (error) {
        console.log('‚ùå Erreur lors de la r√©initialisation:', error.message);
        return { success: false, error: handleSupabaseError(error) };
      }

      console.log('‚úÖ Email de r√©initialisation envoy√© pour:', email);
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©initialisation:', error);
      return { success: false, error: 'Erreur lors de la r√©initialisation' };
    }
  }

  /**
   * Mettre √† jour le mot de passe (apr√®s r√©initialisation)
   */
  async updatePassword(newPassword: string): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ Mise √† jour du mot de passe...');
      
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });
      
      if (error) {
        console.log('‚ùå Erreur lors de la mise √† jour:', error.message);
        return { success: false, error: handleSupabaseError(error) };
      }

      console.log('‚úÖ Mot de passe mis √† jour');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour:', error);
      return { success: false, error: 'Erreur lors de la mise √† jour' };
    }
  }

  /**
   * Connexion avec Google OAuth
   */
  async signInWithGoogle(): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      console.log('üîê Connexion avec Google...');
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/dashboard`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });

      if (error) {
        console.log('‚ùå Erreur lors de la connexion Google:', error.message);
        return { success: false, error: handleSupabaseError(error) };
      }

      // Pour OAuth, la redirection se fait automatiquement
      // L'utilisateur sera redirig√© vers Google, puis vers /dashboard
      console.log('‚úÖ Redirection vers Google en cours...');
      return { success: true };

    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion Google:', error);
      return { success: false, error: 'Erreur lors de la connexion Google' };
    }
  }

  /**
   * G√©rer le callback OAuth et cr√©er le profil utilisateur
   */
  async handleOAuthCallback(): Promise<{ success: boolean; user?: User; error?: string }> {
    try {
      console.log('üîÑ Traitement du callback OAuth...');
      
      // R√©cup√©rer la session apr√®s redirection
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration de la session:', sessionError.message);
        return { success: false, error: 'Erreur de session' };
      }

      let currentUser = session?.user;
      
      if (!currentUser) {
        console.log('‚ùå Aucune session trouv√©e, tentative de r√©cup√©ration...');
        // Essayer de r√©cup√©rer l'utilisateur directement
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        if (userError || !user) {
          return { success: false, error: 'Aucune session trouv√©e' };
        }
        currentUser = user;
        console.log('‚úÖ Utilisateur r√©cup√©r√© directement:', user.id);
      }

      // Attendre que le profil utilisateur soit cr√©√© par le trigger
      console.log('‚è≥ Attente de la cr√©ation du profil utilisateur...');
      await this.waitForUserProfile(currentUser.id);

      // R√©cup√©rer les donn√©es utilisateur depuis la table users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', currentUser.id)
        .single() as { data: User | null; error: any };

      if (userError) {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', userError.message);
        // Cr√©er un utilisateur basique si le trigger n'a pas encore fonctionn√©
        const user: User = {
          id: currentUser.id,
          username: currentUser.user_metadata?.full_name || currentUser.email?.split('@')[0] || 'Utilisateur',
          email: currentUser.email || '',
          phone: currentUser.user_metadata?.phone || '',
          role: 'user',
          preferences: {
            theme: 'system',
            language: 'fr',
            currency: 'MGA'
          },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          last_sync: new Date().toISOString()
        };
        return { success: true, user };
      }

      if (!userData) {
        console.log('‚ùå Aucune donn√©e utilisateur trouv√©e');
        return { success: false, error: 'Aucune donn√©e utilisateur trouv√©e' };
      }

      // Convertir les donn√©es Supabase en format User
      const user: User = {
        id: userData.id,
        username: userData.username,
        email: userData.email,
        phone: userData.phone || '',
        role: userData.role,
        preferences: userData.preferences,
        created_at: userData.created_at,
        updated_at: userData.updated_at,
        last_sync: userData.last_sync
      };

      console.log('‚úÖ Connexion Google r√©ussie pour:', user.username);
      return { success: true, user };

    } catch (error) {
      console.error('‚ùå Erreur lors du traitement du callback OAuth:', error);
      return { success: false, error: 'Erreur lors de la connexion Google' };
    }
  }

  /**
   * Attendre que le profil utilisateur soit cr√©√© par le trigger
   */
  private async waitForUserProfile(userId: string, maxAttempts: number = 10, delayMs: number = 1000): Promise<void> {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const { data: userData, error } = await supabase
          .from('users')
          .select('id')
          .eq('id', userId)
          .single();

        if (!error && userData) {
          console.log('‚úÖ Profil utilisateur cr√©√© avec succ√®s');
          return;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Tentative ${attempt}/${maxAttempts} - Profil utilisateur pas encore cr√©√©`);
      }
      
      if (attempt < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, delayMs));
      }
    }
    
    console.warn('‚ö†Ô∏è Profil utilisateur non cr√©√© apr√®s toutes les tentatives, mais la connexion a r√©ussi');
  }

  /**
   * D√©connexion utilisateur avec Supabase Auth
   */
  async logout(): Promise<boolean> {
    try {
      console.log('üö™ D√©connexion en cours...');
      
      // D√©connexion avec Supabase
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Erreur lors de la d√©connexion:', error);
        return false;
      }
      
      // Effacer les donn√©es locales
      localStorage.removeItem('bazarkely-user');
      localStorage.removeItem('bazarkely-authenticated');
      sessionStorage.clear();
      sessionStorage.setItem('bazarkely-logged-out', 'true');
      
      console.log('‚úÖ D√©connexion r√©ussie');
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      return false;
    }
  }

  /**
   * V√©rifier si l'utilisateur est connect√©
   */
  async isAuthenticated(): Promise<boolean> {
    try {
      return await checkAuth();
    } catch {
      return false;
    }
  }

  /**
   * Obtenir l'utilisateur actuel
   */
  async getCurrentUser(): Promise<User | null> {
    try {
      const user = await getCurrentUser();
      if (!user) return null;

      // R√©cup√©rer les donn√©es utilisateur depuis la table users
      const { data: userData, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single() as { data: User | null; error: any };

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', error);
        return null;
      }

      if (!userData) {
        console.error('‚ùå Aucune donn√©e utilisateur trouv√©e');
        return null;
      }

      // Convertir les donn√©es Supabase en format User
      return {
        id: userData.id,
        username: userData.username,
        email: userData.email,
        phone: userData.phone || '',
        role: userData.role,
        preferences: userData.preferences,
        created_at: userData.created_at,
        updated_at: userData.updated_at,
        last_sync: userData.last_sync
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
      return null;
    }
  }

  /**
   * Sauvegarder l'utilisateur en local (pour compatibilit√©)
   */
  saveUser(user: User): void {
    localStorage.setItem('bazarkely-user', JSON.stringify(user));
    localStorage.setItem('bazarkely-authenticated', 'true');
  }

  /**
   * √âcouter les changements d'authentification
   */
  onAuthStateChange(callback: (user: User | null) => void) {
    return supabase.auth.onAuthStateChange(async (event, session) => {
      if (event === 'SIGNED_IN' && session?.user) {
        const user = await this.getCurrentUser();
        callback(user);
      } else if (event === 'SIGNED_OUT') {
        callback(null);
      }
    });
  }
}

export default new AuthService();
















