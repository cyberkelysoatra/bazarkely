import { db } from '../lib/database';
import { SYNC_CONFIG } from '../constants';
import type { SyncOperation, User } from '../types';
import { optimizedSyncService } from './OptimizedSyncService';
import { performanceMonitor } from './PerformanceMonitor';

class SyncService {
  private syncInterval: NodeJS.Timeout | null = null;
  private isRunning = false;
  private retryInterval: NodeJS.Timeout | null = null;

  // D√©marrer la synchronisation automatique
  startAutoSync(): void {
    if (this.isRunning) return;
    
    this.isRunning = true;
    
    // Synchronisation principale
    this.syncInterval = setInterval(() => {
      this.syncData();
    }, SYNC_CONFIG.interval);
    
    // Retry des op√©rations √©chou√©es
    this.retryInterval = setInterval(() => {
      this.retryFailedOperations();
    }, 30000); // Toutes les 30 secondes
    
    // D√©marrer le monitoring de performance
    performanceMonitor.startMonitoring();
    
    console.log('üîÑ Synchronisation automatique optimis√©e d√©marr√©e');
  }

  // Arr√™ter la synchronisation automatique
  stopAutoSync(): void {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
      this.retryInterval = null;
    }
    
    this.isRunning = false;
    
    // Arr√™ter le monitoring de performance
    performanceMonitor.stopMonitoring();
    
    console.log('‚èπÔ∏è Synchronisation automatique arr√™t√©e');
  }

  // Synchronisation optimis√©e avec differential sync
  async syncData(): Promise<void> {
    const startTime = performance.now();
    
    try {
      const user = this.getCurrentUser();
      if (!user) {
        console.log('‚ùå Aucun utilisateur connect√© pour la synchronisation');
        return;
      }

      console.log('üîÑ D√©but de la synchronisation diff√©rentielle...');

      // Utiliser le service de synchronisation optimis√©
      const result = await optimizedSyncService.differentialSync(user.id);
      
      if (result.success) {
        console.log('‚úÖ Synchronisation diff√©rentielle termin√©e avec succ√®s');
        
        // Enregistrer les m√©triques de performance
        const syncTime = performance.now() - startTime;
        performanceMonitor.recordNetworkRequest(syncTime, true);
        
        // Nettoyer les op√©rations trait√©es
        await this.cleanupCompletedOperations();
      } else {
        console.error('‚ùå Erreur lors de la synchronisation diff√©rentielle:', result.errors);
        
        // Enregistrer l'erreur
        const syncTime = performance.now() - startTime;
        performanceMonitor.recordNetworkRequest(syncTime, false);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error);
      
      // Enregistrer l'erreur
      const syncTime = performance.now() - startTime;
      performanceMonitor.recordNetworkRequest(syncTime, false);
    }
  }

  // Retry des op√©rations √©chou√©es
  private async retryFailedOperations(): Promise<void> {
    try {
      await optimizedSyncService.retryFailedOperations();
    } catch (error) {
      console.error('‚ùå Erreur lors du retry des op√©rations:', error);
    }
  }

  // Envoyer les op√©rations en attente vers le serveur (m√©thode legacy)
  private async pushPendingOperations(userId: string): Promise<void> {
    const pendingOps = await db.syncQueue
      .where('userId')
      .equals(userId)
      .and(op => op.status === 'pending')
      .limit(SYNC_CONFIG.batchSize)
      .toArray();

    for (const op of pendingOps) {
      try {
        await this.sendOperationToServer(op);
        
        // Marquer comme termin√©
        await db.syncQueue.update(op.id, { status: 'completed' });
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'envoi de l'op√©ration ${op.id}:`, error);
        
        // Incr√©menter le compteur de tentatives
        const retryCount = op.retryCount + 1;
        if (retryCount >= SYNC_CONFIG.maxRetries) {
          await db.syncQueue.update(op.id, { status: 'failed' });
        } else {
          await db.syncQueue.update(op.id, { 
            retryCount,
            status: 'pending'
          });
        }
      }
    }
  }

  // Envoyer une op√©ration au serveur
  private async sendOperationToServer(operation: SyncOperation): Promise<void> {
    // Mode offline-only pour l'instant (pas de backend disponible)
    console.log(`üìù Mode offline: Op√©ration ${operation.operation} pour ${operation.table_name} mise en queue locale`);
    
    // Simuler un succ√®s pour √©viter les erreurs
    // En mode production, cette fonction sera remplac√©e par l'appel au vrai serveur
    return Promise.resolve();
  }

  // R√©cup√©rer les donn√©es du serveur
  private async pullServerData(_userId: string): Promise<void> {
    // Mode offline-only pour l'instant (pas de backend disponible)
    console.log(`üì• Mode offline: R√©cup√©ration des donn√©es locale uniquement`);
    
    // En mode production, cette fonction sera remplac√©e par l'appel au vrai serveur
    return Promise.resolve();
  }


  // Ajouter une op√©ration √† la queue de synchronisation (optimis√©e)
  async queueOperation(
    operation: 'CREATE' | 'UPDATE' | 'DELETE',
    table_name: 'accounts' | 'transactions' | 'budgets' | 'goals',
    data: any,
    userId: string
  ): Promise<void> {
    // Enregistrer l'op√©ration utilisateur pour les m√©triques
    performanceMonitor.recordUserOperation();
    
    const syncOp: SyncOperation = {
      id: crypto.randomUUID(),
      userId,
      operation,
      table_name,
      data,
      timestamp: new Date(),
      retryCount: 0,
      status: 'pending'
    };

    try {
      // Utiliser une transaction optimis√©e avec verrous
      await db.optimizedTransaction(
        ['syncQueue'],
        async (trans) => {
          await trans.table('syncQueue').add(syncOp);
        },
        [{ table: 'syncQueue', recordId: userId }]
      );
      
      console.log(`üìù Op√©ration ${operation} ajout√©e √† la queue pour ${table_name}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ajout de l\'op√©ration √† la queue:', error);
      throw error;
    } finally {
      // Terminer l'op√©ration utilisateur
      performanceMonitor.finishUserOperation();
    }
  }

  // Mettre √† jour le timestamp de derni√®re synchronisation
  private async updateLastSync(userId: string): Promise<void> {
    await db.users.update(userId, { lastSync: new Date() });
  }

  // Obtenir l'utilisateur actuel
  private getCurrentUser(): User | null {
    const storedUser = localStorage.getItem('bazarkely-user');
    return storedUser ? JSON.parse(storedUser) : null;
  }


  // Synchronisation manuelle
  async manualSync(): Promise<void> {
    console.log('üîÑ Synchronisation manuelle d√©marr√©e...');
    await this.syncData();
  }

  // Obtenir le statut de synchronisation (optimis√©)
  async getSyncStatus(): Promise<{
    isOnline: boolean;
    lastSync: Date | null;
    pendingOperations: number;
    performance: {
      memoryUsage: number;
      averageResponseTime: number;
      concurrentOperations: number;
      activeAlerts: number;
    };
  }> {
    const user = this.getCurrentUser();
    if (!user) {
      return {
        isOnline: navigator.onLine,
        lastSync: null,
        pendingOperations: 0,
        performance: {
          memoryUsage: 0,
          averageResponseTime: 0,
          concurrentOperations: 0,
          activeAlerts: 0
        }
      };
    }

    const userData = await db.users.get(user.id);
    const pendingOps = await db.syncQueue
      .where('userId')
      .equals(user.id)
      .and(op => op.status === 'pending')
      .count();

    // Obtenir les m√©triques de performance
    const currentMetrics = performanceMonitor.getCurrentMetrics();
    const activeAlerts = performanceMonitor.getActiveAlerts();

    return {
      isOnline: navigator.onLine,
      lastSync: userData?.lastSync ? new Date(userData.lastSync) : null,
      pendingOperations: pendingOps,
      performance: {
        memoryUsage: currentMetrics?.memoryUsage || 0,
        averageResponseTime: currentMetrics?.averageResponseTime || 0,
        concurrentOperations: currentMetrics?.concurrentUsers || 0,
        activeAlerts: activeAlerts.length
      }
    };
  }

  // Nettoyer les op√©rations termin√©es
  async cleanupCompletedOperations(): Promise<void> {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 7); // Garder 7 jours

    await db.syncQueue
      .where('timestamp')
      .below(cutoffDate)
      .and(op => op.status === 'completed')
      .delete();

    console.log('üßπ Op√©rations termin√©es nettoy√©es');
  }
}

export const syncService = new SyncService();
export default syncService;
