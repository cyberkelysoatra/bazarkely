/**
 * Script de validation du syst√®me de nettoyage - BazarKELY
 * 
 * Ce script effectue des tests de validation SANS modifier les donn√©es
 * pour v√©rifier que le syst√®me de nettoyage est pr√™t pour le d√©ploiement.
 * 
 * S√âCURIT√â:
 * - Aucune op√©ration de suppression
 * - Aucune modification de donn√©es
 * - Tests en lecture seule uniquement
 */

import adminCleanupService from './services/adminCleanupService';

/**
 * Test de validation complet du syst√®me de nettoyage
 */
export async function validateCleanupSystem(): Promise<{
  phase1_sql_validation: boolean;
  phase2_monitoring_check: boolean;
  phase3_typescript_validation: boolean;
  overall_safe_to_deploy: boolean;
  issues: string[];
  recommendations: string[];
}> {
  console.log('üîç D√âMARRAGE DE LA VALIDATION DU SYST√àME DE NETTOYAGE');
  console.log('‚ö†Ô∏è  MODE S√âCURIS√â - AUCUNE MODIFICATION DE DONN√âES');
  
  const issues: string[] = [];
  const recommendations: string[] = [];
  
  // PHASE 1: Validation TypeScript Service
  console.log('\nüìã PHASE 1: Validation du Service TypeScript');
  let phase1_sql_validation = true;
  
  try {
    // Test de compilation du service
    console.log('‚úÖ Service TypeScript compil√© avec succ√®s');
    
    // Test de l'acc√®s admin
    console.log('üîê Test de l\'acc√®s administrateur...');
    const adminTest = await adminCleanupService.testCleanupSystem();
    
    if (!adminTest.success) {
      console.log('‚ö†Ô∏è  Test d\'acc√®s admin √©chou√© (attendu en d√©veloppement):', adminTest.error);
      issues.push('Test d\'acc√®s admin √©chou√© - v√©rifier la configuration Supabase');
      recommendations.push('Configurer les variables d\'environnement Supabase pour les tests');
    } else {
      console.log('‚úÖ Acc√®s administrateur valid√©');
      console.log('üìä Syst√®me de nettoyage d√©tect√©:', {
        fonction_existe: adminTest.data?.cleanup_function_exists,
        trigger_existe: adminTest.data?.trigger_exists,
        vue_monitoring_existe: adminTest.data?.monitoring_view_exists,
        utilisateurs_orphelins: adminTest.data?.orphaned_users_count
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation TypeScript:', error);
    issues.push('Erreur de compilation ou d\'ex√©cution du service TypeScript');
    phase1_sql_validation = false;
  }
  
  // PHASE 2: Test de monitoring (lecture seule)
  console.log('\nüìã PHASE 2: Test de Monitoring (Lecture Seule)');
  let phase2_monitoring_check = true;
  
  try {
    // Test de r√©cup√©ration de la liste des orphelins (lecture seule)
    console.log('üìä Test de r√©cup√©ration de la liste des utilisateurs orphelins...');
    const orphanedList = await adminCleanupService.getOrphanedUsersList();
    
    if (!orphanedList.success) {
      console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer la liste des orphelins:', orphanedList.error);
      issues.push('Impossible d\'acc√©der √† la vue de monitoring des orphelins');
      recommendations.push('V√©rifier que la vue orphaned_auth_users_monitor existe dans la base de donn√©es');
    } else {
      console.log('‚úÖ Liste des utilisateurs orphelins r√©cup√©r√©e');
      console.log('üìä Nombre d\'utilisateurs orphelins d√©tect√©s:', orphanedList.data?.length || 0);
      
      if (orphanedList.data && orphanedList.data.length > 0) {
        console.log('üë• Utilisateurs orphelins trouv√©s:');
        orphanedList.data.slice(0, 3).forEach((user, index) => {
          console.log(`  ${index + 1}. ${user.email} (cr√©√© le ${user.created_at})`);
        });
        
        if (orphanedList.data.length > 3) {
          console.log(`  ... et ${orphanedList.data.length - 3} autres`);
        }
        
        recommendations.push(`${orphanedList.data.length} utilisateurs orphelins d√©tect√©s - nettoyage recommand√©`);
      } else {
        console.log('‚úÖ Aucun utilisateur orphelin d√©tect√© - syst√®me propre');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de monitoring:', error);
    issues.push('Erreur lors de l\'acc√®s aux donn√©es de monitoring');
    phase2_monitoring_check = false;
  }
  
  // PHASE 3: Test des statistiques (lecture seule)
  console.log('\nüìã PHASE 3: Test des Statistiques (Lecture Seule)');
  let phase3_typescript_validation = true;
  
  try {
    // Test de r√©cup√©ration des statistiques
    console.log('üìà Test de r√©cup√©ration des statistiques...');
    const stats = await adminCleanupService.getCleanupStats();
    
    if (!stats.success) {
      console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer les statistiques:', stats.error);
      issues.push('Impossible d\'acc√©der aux statistiques de nettoyage');
      recommendations.push('V√©rifier les permissions sur les fonctions de statistiques');
    } else {
      console.log('‚úÖ Statistiques r√©cup√©r√©es');
      console.log('üìä Statistiques d√©taill√©es:', {
        total_orphelins: stats.data?.total_orphaned,
        plus_ancien: stats.data?.oldest_orphaned,
        plus_recent: stats.data?.newest_orphaned,
        age_moyen_jours: stats.data?.avg_age_days,
        systeme_sain: stats.data?.cleanup_system_healthy
      });
      
      if (stats.data && stats.data.total_orphaned > 10) {
        issues.push(`Nombre √©lev√© d'utilisateurs orphelins: ${stats.data.total_orphaned}`);
        recommendations.push('Nettoyage urgent recommand√©');
      }
      
      if (stats.data && stats.data.avg_age_days > 7) {
        issues.push(`Utilisateurs orphelins anciens: √¢ge moyen ${stats.data.avg_age_days} jours`);
        recommendations.push('Nettoyage recommand√© pour les utilisateurs anciens');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test des statistiques:', error);
    issues.push('Erreur lors de l\'acc√®s aux statistiques');
    phase3_typescript_validation = false;
  }
  
  // √âvaluation globale
  const overall_safe_to_deploy = phase1_sql_validation && phase2_monitoring_check && phase3_typescript_validation && issues.length === 0;
  
  // Rapport final
  console.log('\nüéØ RAPPORT DE VALIDATION FINAL');
  console.log('================================');
  console.log(`‚úÖ Phase 1 (TypeScript): ${phase1_sql_validation ? 'PASS√â' : '√âCHOU√â'}`);
  console.log(`‚úÖ Phase 2 (Monitoring): ${phase2_monitoring_check ? 'PASS√â' : '√âCHOU√â'}`);
  console.log(`‚úÖ Phase 3 (Statistiques): ${phase3_typescript_validation ? 'PASS√â' : '√âCHOU√â'}`);
  console.log(`üéØ D√©ploiement s√©curis√©: ${overall_safe_to_deploy ? 'OUI' : 'NON'}`);
  
  if (issues.length > 0) {
    console.log('\n‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:');
    issues.forEach((issue, index) => {
      console.log(`  ${index + 1}. ${issue}`);
    });
  }
  
  if (recommendations.length > 0) {
    console.log('\nüí° RECOMMANDATIONS:');
    recommendations.forEach((rec, index) => {
      console.log(`  ${index + 1}. ${rec}`);
    });
  }
  
  return {
    phase1_sql_validation,
    phase2_monitoring_check,
    phase3_typescript_validation,
    overall_safe_to_deploy,
    issues,
    recommendations
  };
}

/**
 * Test rapide de validation (lecture seule)
 */
export async function quickValidationTest(): Promise<boolean> {
  console.log('‚ö° Test rapide de validation du syst√®me de nettoyage...');
  
  try {
    // Test d'acc√®s admin uniquement
    const adminTest = await adminCleanupService.testCleanupSystem();
    
    if (!adminTest.success) {
      console.log('‚ö†Ô∏è  Test d\'acc√®s admin √©chou√©:', adminTest.error);
      return false;
    }
    
    console.log('‚úÖ Test rapide r√©ussi');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test rapide:', error);
    return false;
  }
}

// Export par d√©faut
export default {
  validateCleanupSystem,
  quickValidationTest
};














